{"version":3,"sources":["model/Enums.js","Utils.js","service/GameService.js","service/PlayerService.js","model/Player.js","components/game/Hand.js","components/game/MiddleSection.js","components/game/FooterSection.js","components/RulesSection.js","components/Straight5.js","App.js","reportWebVitals.js","index.js"],"names":["MoveState","START_STATE","CARD_DRAWN","DISCARD_CHOSEN","CARD_DISCARDED","SWAP_CHOSEN","SWAP_IN_PROGRESS","PRE_END_STATE","CLAIMING_TOKEN","AppMode","GAME","PLAYER_WIN","require","shuffleArray","array","i","length","j","Math","floor","random","getPlayerTextForMoveState","moveState","cardIndex","GameService","playerService","this","deck","discard","swapCardIndex","activeCard","activePlayerIndex","tokenToClaim","repeats","max","push","value","seen","getDeck","setDeck","getDiscard","splice","card","pop","setActiveCard","getTopCardFromDeck","console","error","index","getSwapCardIndex","playerCards","getActivePlayersDeck","temp","setSwapCardIndex","getActiveCard","createDeck","dealCardsToPlayers","initializeDiscard","setActivePlayerIndex","setTokenToClaim","canClaimToken","token","getActivePlayersTokens","includes","won","three_map","Object","keys","fh_map","getActivePlayerIndex","getNumberOfPlayers","getTokenToClaim","prev","list","playerDeck","getPlayers","getTokens","Player","PlayerService","numPlayers","players","resetPlayers","tokens","Hand","props","render","className","role","name","id","map","onClick","cardPressedCallback","TableCanvas","React","createRef","bind","Component","drawCallback","getTopDiscardValue","gameService","ShowCardActions","ShowTurnUpAction","activePlayerHasAllCardsFaceUp","ShowEndActions","ShowToken","Fragment","buttonPressedCallback","targetTokens","maxTokens","href","Straight5","StartNewGame","setNumberOfPlayers","startNewGame","setState","DrawCard","type","state","drawCardFromDeck","drawCardFromDiscard","ReplaceCard","replaceCard","EndMove","DiscardCard","discardActiveCard","TurnCardFaceUp","turnCardFaceUp","SwapCards","swapIsValid","swapCards","activePlayerCanClaimToken","ChangeTurn","ClaimTokenCardPress","isValidIndexForToken","claimToken","checkIfWinner","nextPlayer","handleActionButtonPressed","action","handlePlayerCardPressed","player","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e57d4cc6.chunk.js","sourcesContent":["export const MoveState = {\n  START_STATE:  'START_STATE',\n  CARD_DRAWN: 'CARD_DRAWN',\n  DISCARD_CHOSEN: 'DISCARD_CHOSEN',\n  CARD_DISCARDED: 'CARD_DISCARDED',\n  SWAP_CHOSEN: 'SWAP_CHOSEN',\n  SWAP_IN_PROGRESS: 'SWAP_IN_PROGRESS',\n  PRE_END_STATE: 'PRE_END_STATE',\n  CLAIMING_TOKEN: 'CLAIMING_TOKEN'\n}\n\nexport const AppMode = {\n  START_STATE: 'START_STATE',\n  GAME: 'GAME',\n  PLAYER_WIN: 'PLAYER_WIN'\n}\n","const {MoveState} = require('./model/Enums.js')\n\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nfunction getPlayerTextForMoveState(moveState, cardIndex) {\n  switch (moveState) {\n    case MoveState.START_STATE:\n      return 'Please draw a card from Deck or Discard'\n    case MoveState.CARD_DRAWN:\n      return 'Replace card in your hand or choose a discard option';\n    case MoveState.DISCARD_CHOSEN:\n      return 'Select the first card to discard or pass'\n    case MoveState.CARD_DISCARDED:\n      return 'Select the second card to discard or pass'\n    case MoveState.SWAP_CHOSEN:\n      return 'Select the first card you\\'d like  to swap'\n    case MoveState.SWAP_IN_PROGRESS:\n      return 'Selected ' + cardIndex + '. Please select a second card to swap'\n    case MoveState.PRE_END_STATE:\n      return 'Please select a token to claim or pass'\n    case MoveState.CLAIMING_TOKEN:\n      return 'Please select the first card of your run';\n    default:\n      return 'UNKONWN STATE DETECTED'\n  }\n}\n\nexport {shuffleArray, getPlayerTextForMoveState};\n","const { shuffleArray } = require('../Utils.js')\n\nclass GameService {\n\n  constructor(playerService) {\n      this.playerService = playerService;\n\n      this.deck = [];\n      this.discard = [];\n      this.swapCardIndex = -1;\n      this.activeCard = {};\n      this.activePlayerIndex = 0;\n      this.tokenToClaim = '';\n  }\n\n  createDeck(repeats, max) {\n    this.deck = [];\n    for (let i = 0; i < repeats; i++) {\n      for (let j = 0; j < max; j++) {\n        this.deck.push({value: j+1, seen: false})\n      }\n    }\n    shuffleArray(this.deck);\n  }\n\n  getTopCardFromDeck() {\n    if (this.getDeck().length === 0) {\n      this.setDeck(shuffleArray(this.getDiscard().splice(0, this.getDiscard().length - 1)));\n    }\n    const card = this.getDeck().pop();\n    card.seen = false;\n    return card;\n  }\n\n  drawCardFromDeck() {\n    this.setActiveCard(this.getTopCardFromDeck());\n  }\n\n  drawCardFromDiscard() {\n    if (this.getDiscard().length === 0) {\n      console.error('SOMETHING went wrong,  discard length = 0')\n    }\n    this.setActiveCard(this.getDiscard().pop());\n  }\n\n  initializeDiscard() {\n    this.discard.push(this.deck.pop());\n  }\n\n  swapIsValid(index) {\n    return this.getSwapCardIndex() > 0 && this.getSwapCardIndex() !== index;\n  }\n\n  swapCards(index) {\n    const playerCards = this.getActivePlayersDeck();\n    const temp = playerCards[index];\n    playerCards[index] = playerCards[this.swapCardIndex];\n    playerCards[this.swapCardIndex] = temp;\n    this.setSwapCardIndex(-1);\n  }\n\n  replaceCard(index) {\n    this.getActiveCard().seen = true;\n    this.getDiscard().push(this.getActivePlayersDeck()[index])\n    this.getActivePlayersDeck()[index] = this.getActiveCard();\n    this.setActiveCard({});\n  }\n\n  turnCardFaceUp(index) {\n    const card = this.getActivePlayersDeck()[index];\n    if (this.getActivePlayersDeck()[index].seen === true) {\n      return false;\n    }\n    card.seen = true;\n    return true;\n  }\n\n  discardActiveCard() {\n    this.getDiscard().push(this.getActiveCard());\n    this.setActiveCard({});\n  }\n\n  startNewGame(repeats, max) {\n    this.createDeck(repeats, max);\n    this.playerService.dealCardsToPlayers(this.getDeck());\n    this.initializeDiscard();\n    this.setSwapCardIndex(-1);\n    this.setActiveCard({});\n    this.setActivePlayerIndex(0);\n    this.setTokenToClaim('');\n  }\n\n  activePlayerCanClaimToken() {\n    return this.canClaimToken('THREE_IN_A_ROW') ||\n     this.canClaimToken('FOUR_IN_A_ROW') ||\n     this.canClaimToken('FIVE_IN_A_ROW') ||\n     this.canClaimToken('THREE_OF_A_KIND') ||\n     this.canClaimToken('FULL_HOUSE');\n  }\n\n  canClaimToken(token) {\n    const deck = this.getActivePlayersDeck();\n    const existing_tokens = this.getActivePlayersTokens();\n    if (existing_tokens.includes(token)) {\n      return false;\n    }\n\n    switch (token) {\n      case 'THREE_IN_A_ROW':\n        for (let j = 0; j < 3; j ++) {\n          let won = true;\n          if (!deck[j].seen) {\n            continue\n          }\n          for (let i = j+1; i < 3+j; i ++) {\n            if (!deck[i].seen || deck[i].value !== deck[i-1].value + 1) {\n              won = false;\n              break;\n            }\n          }\n          if (won) {\n            return true\n          }\n        }\n        return false;\n      case 'FOUR_IN_A_ROW':\n        for (let j = 0; j < 2; j ++) {\n          let won = true;\n          if (!deck[j].seen) {\n            continue\n          }\n          for (let i = j+1; i < 4+j; i ++) {\n            if (!deck[i].seen || deck[i].value !== deck[i-1].value + 1) {\n              won = false;\n              break;\n            }\n          }\n          if (won) {\n            return true\n          }\n        }\n        return false;\n      case 'FIVE_IN_A_ROW':\n        if (!deck[0].seen) {\n          return false\n        }\n        for (let i = 1; i < 5; i ++) {\n          if (!deck[i].seen || deck[i].value !== deck[i-1].value + 1) {\n            return false\n          }\n        }\n        return true;\n      case 'THREE_OF_A_KIND':\n        let three_map = {};\n        for (let i = 0; i < 5; i++) {\n          if (!deck[i].seen) {\n            continue;\n          }\n          if (!three_map[deck[i].value]) {\n            three_map[deck[i].value] = 0\n          }\n          three_map[deck[i].value] = three_map[deck[i].value] + 1\n        }\n\n        for (let key of Object.keys(three_map)) {\n          if (three_map[key] >= 3) {\n            return true;\n          }\n        }\n        return false;\n      case 'FULL_HOUSE':\n        let fh_map = {};\n        for (let i = 0; i < 5; i++) {\n          if (!deck[i].seen) {\n            continue;\n          }\n          if (!fh_map[deck[i].value]) {\n            fh_map[deck[i].value] = 0\n          }\n          fh_map[deck[i].value] = fh_map[deck[i].value] + 1\n        }\n        const keys = Object.keys(fh_map);\n        if (keys.length !== 2) {\n          return false;\n        }\n        return (fh_map[keys[0]] === 2 && fh_map[keys[1]] === 3) || (fh_map[keys[0]] === 3 && fh_map[keys[1]] === 2)\n    }\n    return false;\n  }\n\n  nextPlayer() {\n    this.setActivePlayerIndex(this.getActivePlayerIndex() + 1 === this.playerService.getNumberOfPlayers() ? 0 : this.getActivePlayerIndex() + 1);\n  }\n\n  isValidIndexForToken(index) {\n    const deck = this.getActivePlayersDeck();\n    if ([\"THREE_OF_A_KIND\", \"FULL_HOUSE\", \"FIVE_IN_A_ROW\"].includes(this.getTokenToClaim())) {\n      return this.canClaimToken(deck, this.getTokenToClaim(), this.getActivePlayersTokens());\n    }\n    if (this.getTokenToClaim() === 'THREE_IN_A_ROW') {\n      // if index is 3 that is 4th card. 3+4 not enough cards for THREE_IN_A_ROW\n      if (!deck[index].seen || index >= 3) {\n        return false;\n      }\n      let prev = deck[index].value;\n      for (let i = index + 1; i < index + 3; i++) {\n\n        if (!deck[i].seen || deck[i].value !== ++prev)  {\n          return false;\n        }\n      }\n      return true;\n    }\n    if (this.getTokenToClaim() === 'FOUR_IN_A_ROW') {\n      // if index is 2 that is 3rd card. 2+3+4 not enough cards for THREE_IN_A_ROW\n      if (!deck[index].seen || index >= 2) {\n        return false;\n      }\n      let prev = deck[index].value;\n      for (let i = index + 1; i < index + 4; i++) {\n\n        if (!deck[i].seen || deck[i].value !== ++prev)  {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  claimToken(index) {\n    const deck = this.getActivePlayersDeck();\n    switch (this.getTokenToClaim()) {\n      case 'FIVE_IN_A_ROW':\n      case 'FULL_HOUSE':\n        for (let i = 0; i < deck.length; i ++) {\n          this.getDiscard().push(deck[i]);\n          deck[i] = this.getTopCardFromDeck();\n        }\n        break;\n      case 'THREE_OF_A_KIND':\n        let three_map = {};\n        for (let i = 0; i < 5; i++) {\n          if (!deck[i].seen) {\n            continue;\n          }\n          if (!three_map[deck[i].value]) {\n            three_map[deck[i].value] = []\n          }\n          three_map[deck[i].value].push(i);\n          if (three_map[deck[i].value].length >= 3) {\n            const list = three_map[deck[i].value];\n            for (let j = 0; j < list.length; j ++) {\n              this.getDiscard().push(deck[list[j]]);\n              deck[list[j]] = this.getTopCardFromDeck();\n            }\n            break;\n          }\n        }\n        break;\n      case 'THREE_IN_A_ROW':\n      for (let i = index; i < index + 3; i++) {\n        this.getDiscard().push(deck[i]);\n        deck[i] = this.getTopCardFromDeck();\n        deck[i].seen = false;\n      }\n        break;\n      case 'FOUR_IN_A_ROW':\n      for (let i = index; i < index + 4; i++) {\n        this.getDiscard().push(deck[i]);\n        deck[i] = this.getTopCardFromDeck();\n      }\n        break;\n      default:\n        console.error('something went wrong');\n        return\n    }\n    this.getActivePlayersTokens().push(this.getTokenToClaim());\n    this.setTokenToClaim('');\n  }\n\n  activePlayerHasAllCardsFaceUp() {\n    const playerDeck = this.getActivePlayersDeck()\n    for (let i = 0; i < playerDeck.length; i++) {\n      if (!playerDeck[i].seen) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  getActivePlayersTokens() {\n    return this.playerService.getPlayers()[this.getActivePlayerIndex()].getTokens();\n  }\n\n  getActivePlayersDeck() {\n    return this.playerService.getPlayers()[this.getActivePlayerIndex()].getDeck();\n  }\n\n  getDeck() {\n    return this.deck;\n  }\n\n  getDiscard() {\n    return this.discard;\n  }\n\n  getSwapCardIndex() {\n    return this.swapCardIndex;\n  }\n\n  getActiveCard() {\n    return this.activeCard;\n  }\n\n  getActivePlayerIndex() {\n    return this.activePlayerIndex;\n  }\n\n  getTokenToClaim() {\n    return this.tokenToClaim;\n  }\n\n  setDeck(deck) {\n    this.deck = deck;\n  }\n\n  setDiscard(discard) {\n    this.discard = discard;\n  }\n\n  setSwapCardIndex(swapCardIndex) {\n    this.swapCardIndex = swapCardIndex;\n  }\n\n  setActiveCard(activeCard) {\n    this.activeCard = activeCard;\n  }\n\n  setActivePlayerIndex(activePlayerIndex) {\n    this.activePlayerIndex = activePlayerIndex;\n  }\n\n  setTokenToClaim(tokenToClaim) {\n    this.tokenToClaim = tokenToClaim;\n  }\n}\n\nexport {GameService};\n","const {Player} = require('../model/Player.js');\n\nclass PlayerService {\n\n  constructor(numPlayers) {\n    this.numPlayers = numPlayers;\n    this.players = [];\n    this.resetPlayers();\n  }\n\n  resetPlayers() {\n    this.players = []\n    for (let i = 0; i < this.getNumberOfPlayers(); i ++) {\n      this.players.push(new Player([], []));\n    }\n  }\n\n  dealCardsToPlayers(deck) {\n    for (let j = 0; j < 5; j++) {\n      for (let i = 0; i < this.getPlayers().length; i ++) {\n        this.players[i].getDeck().push(deck.pop());\n      }\n    }\n  }\n\n  getPlayers() {\n    return this.players;\n  }\n\n  setPlayers(players) {\n    this.players = players;\n  }\n\n  setNumberOfPlayers(numPlayers) {\n    this.numPlayers = numPlayers;\n  }\n\n  getNumberOfPlayers() {\n    return this.numPlayers;\n  }\n}\n\nexport {PlayerService};\n","class Player {\n\n  constructor(deck, tokens) {\n      this.deck = deck;\n      this.tokens = tokens; // THREE_IN_A_ROW, FOUR_IN_A_ROW, FIVE_IN_A_ROW, THREE_OF_A_KIND, FULL_HOUSE\n  }\n\n  getDeck() {\n    return this.deck;\n  }\n\n  getTokens() {\n    return this.tokens;\n  }\n\n  setDeck(deck) {\n    this.deck = deck;\n  }\n\n  setTokens(tokens) {\n    this.tokens = tokens;\n  }\n}\n\nexport {Player};\n","import React, { Component } from 'react';\nimport './Hand.css';\n\n\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n    this.TableCanvas = React.createRef();\n    this.render.bind(this);\n    this.deck = this.props.playerService.getPlayers()[this.props.id].getDeck();\n    this.tokens = this.props.playerService.getPlayers()[this.props.id].getTokens();\n  }\n\n  render = () => {\n    return (\n      <div className=\"PlayerHand\" data-testid=\"hand\">\n        <div role=\"header\" className=\"PlayerHeader\" name=\"Player1\">\n          <p className=\"playerTag\">Player {this.props.id+1}</p>\n        </div>\n        <div className=\"PlayerTokenHeader\">\n          <p className=\"playerTag\">Tokens</p>\n        </div>\n        {this.deck.map((card, index) => (\n          <div className='PlayerCard' role='playerCard' key={index} onClick={() => this.props.cardPressedCallback(this.props.id, index)}>\n            {card.seen ? card.value : '?'}\n          </div>\n        ))}\n        <div className='PlayerTokens'>\n        {this.tokens.map((token, index) => (\n          <div className='PlayerToken' role='playerToken' key={index}>\n            {token}\n          </div>\n        ))}\n        </div>\n      </div>\n  )}\n}\n\nexport default Hand;\n","import React, { Component } from 'react';\nimport './MiddleSection.css';\n\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n    this.TableCanvas = React.createRef();\n    this.render.bind(this);\n    this.gameService = props.gameService;\n  }\n\n  getTopDiscardValue() {\n    return this.gameService.getDiscard().length > 0 ? this.gameService.getDiscard()[this.gameService.getDiscard().length-1].value : '';\n  }\n\n  render = () => {\n    return (\n      <div className=\"MiddleSection\" data-testid=\"middle-section\">\n        <div>\n        </div>\n        <div className=\"DiscardSection\">\n          <div className=\"FullWidth\" role=\"header\">\n            Discard\n          </div>\n          <div className=\"PlayerCard\" data-testid=\"middle-section-discard\" onClick={() => {this.props.drawCallback('discard')}}>\n            {this.getTopDiscardValue()}\n          </div>\n        </div>\n        <div  className=\"DeckSection\">\n          <div className=\"FullWidth\" role=\"header\">\n            Deck\n          </div>\n          <div className=\"PlayerCard Card\" data-testid=\"middle-section-deck\" onClick={() => {this.props.drawCallback('deck')}}>\n            ?\n          </div>\n        </div>\n      </div>\n  )}\n}\n\nexport default Hand;\n","import React, { Component } from 'react';\nimport './FooterSection.css';\nconst {MoveState} = require('../../model/Enums.js')\nconst { getPlayerTextForMoveState} = require('../../Utils.js')\n\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n    this.gameService = props.gameService;\n    this.TableCanvas = React.createRef();\n    this.render.bind(this);\n  }\n\n  ShowCardActions = () => {\n    return [MoveState.CARD_DRAWN, MoveState.DISCARD_CHOSEN, MoveState.CARD_DISCARDED, MoveState.SWAP_CHOSEN, MoveState.SWAP_IN_PROGRESS].includes(this.props.moveState)\n  }\n\n  ShowTurnUpAction = () => {\n    return !this.gameService.activePlayerHasAllCardsFaceUp();\n  }\n\n  ShowEndActions = () => {\n    return this.props.moveState === MoveState.PRE_END_STATE;\n  }\n\n  ShowToken = token => {\n    return this.gameService.canClaimToken(token);\n  }\n\n  render = () => {\n    return (\n      <div className=\"CardTableFooter\" data-testid=\"footer-section\">\n        <div className=\"FullWidth\" role='header'>\n          {getPlayerTextForMoveState(this.props.moveState, this.gameService.getSwapCardIndex() + 1)}\n        </div>\n        {this.ShowCardActions() &&\n          <React.Fragment>\n              {(!!this.gameService.getActiveCard() && !!this.gameService.getActiveCard().value) &&\n              <React.Fragment>\n                <div className=\"PlayerCard\" role=\"activeCard\">\n                  {this.gameService.getActiveCard().value}\n                </div>\n                <div>\n                  {this.ShowTurnUpAction() && <button data-testid='turn-face-up-button' onClick={() => {this.props.buttonPressedCallback('turnFaceUp')}}> Discard to turn two face up </button>}\n                  <button onClick={() => {this.props.buttonPressedCallback('swap')}}> Discard to swap two </button>\n                </div>\n            </React.Fragment>}\n            <div className=\"FullWidth\"><button className=\"mb-2 FullWidth\" onClick={() => {this.props.buttonPressedCallback('pass')}}> Pass </button></div>\n\n          </React.Fragment>}\n\n          {this.ShowEndActions() &&\n            <React.Fragment>\n                {this.ShowToken('THREE_IN_A_ROW') && <div><button onClick={() => this.props.buttonPressedCallback('claimToken', 'THREE_IN_A_ROW')}> THREE IN A ROW </button></div>}\n                {this.ShowToken('FOUR_IN_A_ROW') && <div><button onClick={() => this.props.buttonPressedCallback('claimToken', 'FOUR_IN_A_ROW')}> FOUR IN A ROW </button></div>}\n                {this.ShowToken('FIVE_IN_A_ROW') && <div><button onClick={() => this.props.buttonPressedCallback('claimToken', 'FIVE_IN_A_ROW')}> FIVE IN A ROW </button></div>}\n                {this.ShowToken('THREE_OF_A_KIND') && <div><button onClick={() => this.props.buttonPressedCallback('claimToken', 'THREE_OF_A_KIND')}> THREE OF A KIND </button></div>}\n                {this.ShowToken('FULL_HOUSE') && <div><button onClick={() => this.props.buttonPressedCallback('claimToken', 'FULL_HOUSE')}> FULL HOUSE </button></div>}\n                <div className=\"FullWidth\"><button className=\"mb-2 FullWidth\" onClick={() => {this.props.buttonPressedCallback('changeTurn')}}> Pass </button></div>\n            </React.Fragment>}\n      </div>\n  )}\n}\n\nexport default Hand;\n","import React, { Component } from 'react';\nimport './RulesSection.css';\n\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n    this.render.bind(this);\n    this.targetTokens = 4;\n    this.maxTokens = 5;\n  }\n\n  // TODO ability to show rules anytime? (Maybe pop-up)\n  // TODO Ability to change some core settings\n\n  render = () => {\n    return (\n      <div className=\"rulesSection\" data-testid=\"rules-section\">\n        <div className=\"odd\">\n          <h3 className=\"rules-header\">Rules</h3>\n        </div>\n        <div className=\"odd\">\n          <h4 className=\"rules-header\">Introduction</h4>\n          <p className=\"rules-p\">Welcome to Straight 5, a rummy-like, yahtzee-like card game! This is the (work-in-progress) digitial version of the (hopefully future) Straight 5 game. </p>\n        </div>\n\n        <div className=\"even\">\n          <h4 className=\"rules-header\">Winning</h4>\n          <p className=\"rules-p\">\n          The first player to claim {this.targetTokens} out of {this.maxTokens} tokens below wins.</p>\n          <ul>\n            <li>Three in a row</li>\n            <li>Four in a row</li>\n            <li>Five in a row</li>\n            <li>Three of a kind</li>\n            <li>Full House</li>\n          </ul>\n        </div>\n        <div className=\"odd\">\n          <h4 className=\"rules-header\">Set up</h4>\n          <p className=\"rules-p\">Each player begins with 5 cards face-down in front of them.\n          The top card of the deck will be turned over as a discard</p>\n        </div>\n        <div className=\"even\">\n          <h4 className=\"rules-header\">Turn Order</h4>\n          <p className=\"rules-p\">Each consists of three phases:</p>\n          <ol>\n            <li><h4 className=\"phaseHeader\">Draw Phase:</h4> draw the top card of the deck or discard piles</li>\n            <li><h4 className=\"phaseHeader\">Play Phase:</h4> in this phase you can either place the card you drew in front or discard your to:\n              <ul>\n                <li> Turn up to two cards face-up</li>\n                <li> Swap any two cards </li>\n              </ul>\n            </li>\n            <li><h4 className=\"phaseHeader\">Token Phase</h4>: if you have the cards face-up you may choose to discard them to claim a token.</li>\n          </ol>\n        </div>\n        <div className=\"odd\">\n          <h4 className=\"rules-header\">Rule Clarifications</h4>\n          <p className=\"rules-p\">Here are some clarifications on rules above:</p>\n          <ol>\n            <li>When you place the drawn card in front of you, you do not get to take another action</li>\n            <li>You can only claim each token once</li>\n            <li>The cards to claim the tokens for the straights (3/4/5 in a row) must be adjacent and in ascending order (e.g. 1 2 3 not 3 2 1 or 1 3 2)</li>\n            <li>The cards to claim the tokens for three of a kind and full house can be anywhere</li>\n          </ol>\n        </div>\n        <div className=\"even\">\n          <h4 className=\"rules-header\">Final notes</h4>\n          <p className=\"rules-p\">If you find any bugs or issues with Straight 5 please submit an issue by <a href=\"https://github.com/andyrewwer/straight5/issues\">clicking here</a> or you can email me at <a href=\"mailto:a.andyrewwer@gmail.com?subject = Feedback on Straight 5\">a.andyrewwer@gmail.com.</a> Also feel free to email me with other thoughts/feedback/concerns (about the game or otherwise)!</p>\n        </div>\n\n      </div>\n  )}\n}\n\nexport default Hand;\n","import React, { Component } from 'react';\nimport Hand from './game/Hand.js';\nimport MiddleSection from './game/MiddleSection.js';\nimport FooterSection from './game/FooterSection.js';\nimport RulesSection from './RulesSection.js';\nimport './Straight5.css';\nconst {MoveState, AppMode} = require('../model/Enums.js')\n\nclass Straight5 extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      AppMode: AppMode.START_STATE,\n      MoveState: MoveState.START_STATE,\n    };\n    this.playerService = props.playerService;\n    this.gameService = props.gameService;\n  }\n\n  StartNewGame = () => {\n    this.playerService.setNumberOfPlayers(2);\n    this.playerService.resetPlayers();\n    this.gameService.startNewGame(6, 9);\n    this.setState({\n      MoveState: MoveState.START_STATE,\n      AppMode: AppMode.GAME\n    });\n  }\n\n  DrawCard = type => {\n    if (this.state.MoveState !== MoveState.START_STATE) {\n      //TODO animation?\n      return;\n    }\n    if (type === 'deck') {\n      this.gameService.drawCardFromDeck();\n    } else if (type === 'discard') {\n\n      this.gameService.drawCardFromDiscard();\n    } else {\n      console.error('draw card failed', type);\n    }\n    this.setState({\n      MoveState: MoveState.CARD_DRAWN\n    });\n\n  }\n\n  ReplaceCard = index => {\n    this.gameService.replaceCard(index);\n    this.EndMove();\n  }\n\n  DiscardCard = () => {\n    this.gameService.discardActiveCard();\n  }\n\n  TurnCardFaceUp = index => {\n    if (!this.gameService.turnCardFaceUp(index)) {\n      return;\n    }\n    // TODO if all face-up should skip this step\n    if (this.state.MoveState === MoveState.CARD_DISCARDED) {\n      this.EndMove();\n      return;\n    }\n    this.setState({\n      MoveState: MoveState.CARD_DISCARDED,\n    });\n  }\n\n  SwapCards = index => {\n    if (this.gameService.swapIsValid(index)) {\n      this.gameService.swapCards(index);\n      this.EndMove();\n      return\n    }\n    this.gameService.setSwapCardIndex(index);\n    this.setState({\n      MoveState: MoveState.SWAP_IN_PROGRESS\n    })\n  }\n\n  EndMove = () => {\n    if (this.gameService.activePlayerCanClaimToken()) {\n      this.setState({MoveState: MoveState.PRE_END_STATE});\n      return;\n    }\n    this.ChangeTurn();\n\n  }\n\n  checkIfWinner() {\n    if (this.gameService.getActivePlayersTokens().length >= 4) {\n      this.setState({\n        AppMode: AppMode.PLAYER_WIN\n      });\n      return true;\n    }\n    return false;\n  }\n\n  ClaimTokenCardPress = index => {\n    if (this.gameService.isValidIndexForToken(index)) {\n      this.gameService.claimToken(index);\n      if (!this.checkIfWinner()) {\n        return this.ChangeTurn();\n      }\n    } else {\n      console.error('invalid index :(')\n    }\n  }\n\n  ChangeTurn = () => {\n    this.gameService.nextPlayer();\n    return this.setState({\n      MoveState: MoveState.START_STATE\n    });\n  }\n\n  handleActionButtonPressed = (action, token) => {\n    if (action === 'pass') {\n      if (this.state.MoveState === MoveState.CARD_DRAWN) {\n        this.DiscardCard()\n      }\n      return this.EndMove();\n    }\n    if (action === 'swap') {\n      this.setState({MoveState: MoveState.SWAP_CHOSEN})\n      return this.DiscardCard()\n    }\n    if (action === 'changeTurn') {\n      return this.ChangeTurn()\n    }\n    if (action === 'turnFaceUp') {\n      this.setState({MoveState: MoveState.DISCARD_CHOSEN})\n      return this.DiscardCard()\n    }\n    if (action === 'claimToken') {\n      this.gameService.setTokenToClaim(token);\n      if(['THREE_OF_A_KIND', 'FULL_HOUSE', 'FIVE_IN_A_ROW'].includes(token)) {\n        // this could be smarter if only one option for three / four in a row\n        this.gameService.claimToken();\n        if (!this.checkIfWinner()) {\n          return this.ChangeTurn();\n        }\n      }\n      // TODO COME BACK TO THIS LATER, would like more auto-claim for 3/4 in a row\n      // TODO Less autoclaim if multiple options for three of a\n      this.setState({\n        MoveState: MoveState.CLAIMING_TOKEN\n      });\n    }\n  }\n\n  handlePlayerCardPressed = (player, index)  =>  {\n    if (player !== this.gameService.getActivePlayerIndex()) {\n      console.log('card from wrong player clicked')\n      return;\n    }\n    switch (this.state.MoveState) {\n      case MoveState.CARD_DRAWN:\n        this.ReplaceCard(index)\n        break;\n      case MoveState.DISCARD_CHOSEN:\n      case MoveState.CARD_DISCARDED:\n        this.TurnCardFaceUp(index);\n        break\n      case MoveState.SWAP_CHOSEN:\n      case MoveState.SWAP_IN_PROGRESS:\n        this.SwapCards(index)\n        break\n      case MoveState.CLAIMING_TOKEN:\n        this.ClaimTokenCardPress(index);\n        break;\n      default:\n        console.log('No action for this status', this.state.MoveState)\n    }\n  }\n  // TODO SHOW ACTIVE PLAYER\n  // TODO ADD joker\n  // TODO ADD AI\n\n\n  render = () => {\n    return (\n  <div className={this.state.AppMode === AppMode.START_STATE ? 'CardTable' : 'CardTable CardTableGame'}>\n    <h2 className=\"startHeader\" data-testid=\"start-header\">\n      Straight 5\n    </h2>\n    {this.state.AppMode === AppMode.START_STATE &&\n    <React.Fragment>\n        <RulesSection/>\n        <div className=\"mb-4 mt-2\">\n          <button className=\"small-width-button\" onClick={this.StartNewGame}>Start New Game</button>\n        </div>\n\n    </React.Fragment>}\n\n    {this.state.AppMode  === AppMode.GAME &&\n    <React.Fragment>\n      <Hand playerService={this.playerService} id={0} cardPressedCallback={this.handlePlayerCardPressed} />\n      <MiddleSection gameService={this.gameService} drawCallback={this.DrawCard}/>\n      <Hand playerService={this.playerService} id={1} cardPressedCallback={this.handlePlayerCardPressed} />\n      <FooterSection gameService={this.gameService} moveState={this.state.MoveState} buttonPressedCallback={this.handleActionButtonPressed} />\n    </React.Fragment>}\n\n    {this.state.AppMode === AppMode.PLAYER_WIN &&\n    <React.Fragment>\n        <div className=\"mb-4\" data-testid=\"win-header\">\n        Congratulations to Player {this.gameService.getActivePlayerIndex()+1}\n        <button data-testid=\"win-startNewGame\" className=\"mt-2\" onClick={this.StartNewGame}>Start a new Game</button>\n        </div>\n    </React.Fragment>}\n  </div>\n  )}\n}\n\nexport default Straight5;\n","import './App.css';\nimport Straight5 from './components/Straight5.js';\nconst { GameService } = require('./service/GameService.js')\nconst { PlayerService } = require('./service/PlayerService.js')\n\nfunction App() {\n  const playerService = new PlayerService()\n  const gameService = new GameService(playerService);\n\n  return (\n    <div className=\"App\">\n      <header>\n      <div className=\"Container\">\n\n        <Straight5 playerService={playerService} gameService={gameService}></Straight5>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}