{"version":3,"sources":["Utils.js","service/GameService.js","service/PlayerService.js","model/Player.js","components/Hand.js","components/MiddleSection.js","components/FooterSection.js","components/Straight5.js","App.js","reportWebVitals.js","index.js"],"names":["shuffleArray","array","i","length","j","Math","floor","random","getPlayerTextForMoveState","moveState","cardIndex","require","GameService","playerService","this","numPlayers","getNumberOfPlayers","deck","discard","swapCardIndex","activeCard","activePlayerIndex","tokenToClaim","repeats","max","push","value","seen","getDeck","setDeck","getDiscard","splice","card","pop","setActiveCard","getTopCardFromDeck","console","error","index","getSwapCardIndex","playerCards","getActivePlayersDeck","temp","setSwapCardIndex","getActiveCard","createDeck","dealCardsToPlayers","initializeDiscard","canClaimToken","token","getActivePlayersTokens","includes","won","three_map","Object","keys","fh_map","setActivePlayerIndex","getActivePlayerIndex","getTokenToClaim","prev","list","setTokenToClaim","getPlayers","getTokens","Player","PlayerService","players","tokens","Hand","props","render","className","role","name","id","map","onClick","cardPressedCallback","TableCanvas","React","createRef","bind","Component","drawCallback","getTopDiscardValue","gameService","ShowCardActions","ShowEndActions","ShowToken","Fragment","passTurnButtonPressed","turnCardsFaceUpButtonPressed","swapCardsButtonPressed","changeTurn","claimToken","Straight5","StartNewGame","startNewGame","setState","MoveState","AppMode","DrawCard","type","state","drawCardFromDeck","drawCardFromDiscard","ReplaceCard","replaceCard","EndMove","DiscardCard","discardActiveCard","SwapCardsButtonPressed","TurnCardsFaceUpButtonPressed","PassTurnButtonPressed","TurnCardFaceUp","turnCardFaceUp","SwapCards","swapIsValid","swapCards","activePlayerCanClaimToken","ChangeTurn","ClaimToken","ClaimTokenCardPress","isValidIndexForToken","nextPlayer","handlePlayerAction","player","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa3e3249.chunk.js","sourcesContent":["function shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nfunction getPlayerTextForMoveState(moveState, cardIndex) {\n  switch (moveState) {\n    case \"StartState\":\n      return 'Please draw a card from Deck or Discard'\n    case \"CardDrawn\":\n      return 'Replace card in your hand or choose a discard option';\n    case \"DiscardChosen\":\n      return 'Select the first card to discard or pass'\n    case \"CardDiscarded\":\n      return 'Select the second card to discard or pass'\n    case \"SwapChosen\":\n      return 'Select the first card you\\'d like  to swap'\n    case \"SwapInProgress\":\n      return 'Selected ' + cardIndex + '. Please select a second card to swap'\n    case \"PreEndState\":\n      return 'Please select a token to claim or pass'\n    case \"ClaimingToken\":\n      return 'Please select the first card of your run';\n    default:\n      return 'UNKONWN STATE DETECTED'\n  }\n}\n\nexport {shuffleArray, getPlayerTextForMoveState};\n","const { shuffleArray } = require('../Utils.js')\n\nclass GameService {\n\n  constructor(playerService) {\n      this.playerService = playerService;\n      this.numPlayers = this.playerService.getNumberOfPlayers();\n\n      this.deck = [];\n      this.discard = [];\n      this.swapCardIndex = -1;\n      this.activeCard = {};\n      this.activePlayerIndex = 0;\n      this.tokenToClaim = '';\n  }\n\n  createDeck(repeats = 6, max = 9) {\n    this.deck = [];\n    for (let i = 0; i < repeats; i++) {\n      for (let j = 0; j < max; j++) {\n        this.deck.push({value: j+1, seen: false})\n      }\n    }\n    shuffleArray(this.deck);\n  }\n\n  getTopCardFromDeck() {\n    if (this.getDeck().length === 0) {\n      this.setDeck(shuffleArray(this.getDiscard().splice(0, this.getDiscard().length - 1)));\n    }\n    const card = this.getDeck().pop();\n    card.seen = false;\n    return card;\n  }\n\n  drawCardFromDeck() {\n    this.setActiveCard(this.getTopCardFromDeck());\n  }\n\n  drawCardFromDiscard() {\n    if (this.getDiscard().length === 0) {\n      console.error('SOMETHING went wrong,  discard length = 0')\n    }\n    this.setActiveCard(this.getDiscard().pop());\n  }\n\n  initializeDiscard() {\n    this.discard.push(this.deck.pop());\n  }\n\n  swapIsValid(index) {\n    return this.getSwapCardIndex() > 0 && this.getSwapCardIndex() !== index;\n  }\n\n  swapCards(index) {\n    const playerCards = this.getActivePlayersDeck();\n    const temp = playerCards[index];\n    playerCards[index] = playerCards[this.swapCardIndex];\n    playerCards[this.swapCardIndex] = temp;\n    this.setSwapCardIndex(-1);\n  }\n\n  replaceCard(index) {\n    this.getActiveCard().seen = true;\n    this.getDiscard().push(this.getActivePlayersDeck()[index])\n    this.getActivePlayersDeck()[index] = this.getActiveCard();\n    this.setActiveCard({});\n  }\n\n  turnCardFaceUp(index) {\n    const card = this.getActivePlayersDeck()[index];\n    if (this.getActivePlayersDeck()[index].seen === true) {\n      return false;\n    }\n    card.seen = true;\n    return true;\n  }\n\n  discardActiveCard() {\n    this.getDiscard().push(this.getActiveCard());\n    this.setActiveCard({});\n  }\n\n  startNewGame() {\n    this.createDeck();\n    this.playerService.dealCardsToPlayers(this.getDeck());\n    this.initializeDiscard();\n  }\n\n  activePlayerCanClaimToken() {\n    return this.canClaimToken('THREE_IN_A_ROW') ||\n     this.canClaimToken('FOUR_IN_A_ROW') ||\n     this.canClaimToken('FIVE_IN_A_ROW') ||\n     this.canClaimToken('THREE_OF_A_KIND') ||\n     this.canClaimToken('FULL_HOUSE');\n  }\n\n  canClaimToken(token) {\n    const deck = this.getActivePlayersDeck();\n    const existing_tokens = this.getActivePlayersTokens();\n    if (existing_tokens.includes(token)) {\n      return false;\n    }\n\n    switch (token) {\n      case 'THREE_IN_A_ROW':\n        for (let j = 0; j < 3; j ++) {\n          let won = true;\n          if (!deck[j].seen) {\n            continue\n          }\n          for (let i = j+1; i < 3+j; i ++) {\n            if (!deck[i].seen || deck[i].value !== deck[i-1].value + 1) {\n              won = false;\n              break;\n            }\n          }\n          if (won) {\n            return true\n          }\n        }\n        return false;\n      case 'FOUR_IN_A_ROW':\n        for (let j = 0; j < 2; j ++) {\n          let won = true;\n          if (!deck[j].seen) {\n            continue\n          }\n          for (let i = j+1; i < 4+j; i ++) {\n            if (!deck[i].seen || deck[i].value !== deck[i-1].value + 1) {\n              won = false;\n              break;\n            }\n          }\n          if (won) {\n            return true\n          }\n        }\n        return false;\n      case 'FIVE_IN_A_ROW':\n        if (!deck[0].seen) {\n          return false\n        }\n        for (let i = 1; i < 5; i ++) {\n          if (!deck[i].seen || deck[i].value !== deck[i-1].value + 1) {\n            return false\n          }\n        }\n        return true;\n      case 'THREE_OF_A_KIND':\n        let three_map = {};\n        for (let i = 0; i < 5; i++) {\n          if (!deck[i].seen) {\n            continue;\n          }\n          if (!three_map[deck[i].value]) {\n            three_map[deck[i].value] = 0\n          }\n          three_map[deck[i].value] = three_map[deck[i].value] + 1\n        }\n\n        for (let key of Object.keys(three_map)) {\n          if (three_map[key] >= 3) {\n            return true;\n          }\n        }\n        return false;\n      case 'FULL_HOUSE':\n        let fh_map = {};\n        for (let i = 0; i < 5; i++) {\n          if (!deck[i].seen) {\n            continue;\n          }\n          if (!fh_map[deck[i].value]) {\n            fh_map[deck[i].value] = 0\n          }\n          fh_map[deck[i].value] = fh_map[deck[i].value] + 1\n        }\n        const keys = Object.keys(fh_map);\n        if (keys.length !== 2) {\n          return false;\n        }\n        return (fh_map[keys[0]] === 2 && fh_map[keys[1]] === 3) || (fh_map[keys[0]] === 3 && fh_map[keys[1]] === 2)\n    }\n    return false;\n  }\n\n  nextPlayer() {\n    this.setActivePlayerIndex(this.getActivePlayerIndex() + 1 === this.numPlayers ? 0 : this.getActivePlayerIndex() + 1);\n  }\n\n  isValidIndexForToken(index) {\n    const deck = this.getActivePlayersDeck();\n    if ([\"THREE_OF_A_KIND\", \"FULL_HOUSE\", \"FIVE_IN_A_ROW\"].includes(this.getTokenToClaim())) {\n      return this.canClaimToken(deck, this.getTokenToClaim(), this.getActivePlayersTokens());\n    }\n    if (this.getTokenToClaim() === 'THREE_IN_A_ROW') {\n      // if index is 3 that is 4th card. 3+4 not enough cards for THREE_IN_A_ROW\n      if (!deck[index].seen || index >= 3) {\n        return false;\n      }\n      let prev = deck[index].value;\n      for (let i = index + 1; i < index + 3; i++) {\n\n        if (!deck[i].seen || deck[i].value !== ++prev)  {\n          return false;\n        }\n      }\n      return true;\n    }\n    if (this.getTokenToClaim() === 'FOUR_IN_A_ROW') {\n      // if index is 2 that is 3rd card. 2+3+4 not enough cards for THREE_IN_A_ROW\n      if (!deck[index].seen || index >= 2) {\n        return false;\n      }\n      let prev = deck[index].value;\n      for (let i = index + 1; i < index + 4; i++) {\n\n        if (!deck[i].seen || deck[i].value !== ++prev)  {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  claimToken(index) {\n    const deck = this.getActivePlayersDeck();\n    switch (this.getTokenToClaim()) {\n      case 'FIVE_IN_A_ROW':\n      case 'FULL_HOUSE':\n        for (let i = 0; i < deck.length; i ++) {\n          this.getDiscard().push(deck[i]);\n          deck[i] = this.getTopCardFromDeck();\n        }\n        break;\n      case 'THREE_OF_A_KIND':\n        let three_map = {};\n        for (let i = 0; i < 5; i++) {\n          if (!deck[i].seen) {\n            continue;\n          }\n          if (!three_map[deck[i].value]) {\n            three_map[deck[i].value] = []\n          }\n          three_map[deck[i].value].push(i);\n          if (three_map[deck[i].value].length >= 3) {\n            const list = three_map[deck[i].value];\n            for (let j = 0; j < list.length; j ++) {\n              this.getDiscard().push(deck[list[j]]);\n              deck[list[j]] = this.getTopCardFromDeck();\n            }\n            break;\n          }\n        }\n        break;\n      case 'THREE_IN_A_ROW':\n      for (let i = index; i < index + 3; i++) {\n        this.getDiscard().push(deck[i]);\n        deck[i] = this.getTopCardFromDeck();\n        deck[i].seen = false;\n      }\n        break;\n      case 'FOUR_IN_A_ROW':\n      for (let i = index; i < index + 4; i++) {\n        this.getDiscard().push(deck[i]);\n        deck[i] = this.getTopCardFromDeck();\n      }\n        break;\n      default:\n        console.error('something went wrong');\n        return\n    }\n    this.getActivePlayersTokens().push(this.getTokenToClaim());\n    this.setTokenToClaim('');\n\n    // discard cards from index\n    // push token to player\n  }\n\n  getActivePlayersTokens() {\n    return this.playerService.getPlayers()[this.getActivePlayerIndex()].getTokens();\n  }\n\n  getActivePlayersDeck() {\n    return this.playerService.getPlayers()[this.getActivePlayerIndex()].getDeck();\n  }\n\n  getDeck() {\n    return this.deck;\n  }\n\n  getDiscard() {\n    return this.discard;\n  }\n\n  getSwapCardIndex() {\n    return this.swapCardIndex;\n  }\n\n  getActiveCard() {\n    return this.activeCard;\n  }\n\n  getActivePlayerIndex() {\n    return this.activePlayerIndex;\n  }\n\n  getTokenToClaim() {\n    return this.tokenToClaim;\n  }\n\n  setDeck(deck) {\n    this.deck = deck;\n  }\n\n  setDiscard(discard) {\n    this.discard = discard;\n  }\n\n  setSwapCardIndex(swapCardIndex) {\n    this.swapCardIndex = swapCardIndex;\n  }\n\n  setActiveCard(activeCard) {\n    this.activeCard = activeCard;\n  }\n\n  setActivePlayerIndex(activePlayerIndex) {\n    this.activePlayerIndex = activePlayerIndex;\n  }\n\n  setTokenToClaim(tokenToClaim) {\n    this.tokenToClaim = tokenToClaim;\n  }\n}\n\nexport {GameService};\n","const {Player} = require('../model/Player.js');\n\nclass PlayerService {\n\n  constructor(numPlayers) {\n    this.numPlayers = numPlayers;\n    this.players = [];\n    for (let i = 0; i < numPlayers; i ++) {\n      this.players.push(new Player([], []));\n    }\n  }\n\n  dealCardsToPlayers(deck) {\n    for (let j = 0; j < 5; j++) {\n      for (let i = 0; i < this.getPlayers().length; i ++) {\n        this.players[i].getDeck().push(deck.pop());\n      }\n    }\n  }\n\n  getPlayers() {\n    return this.players;\n  }\n\n  setPlayers(players) {\n    this.players = players;\n  }\n\n  getNumberOfPlayers() {\n    return this.numPlayers;\n  }\n}\n\nexport {PlayerService};\n","class Player {\n\n  constructor(deck, tokens) {\n      this.deck = deck;\n      this.tokens = tokens; // THREE_IN_A_ROW, FOUR_IN_A_ROW, FIVE_IN_A_ROW, THREE_OF_A_KIND, FULL_HOUSE\n  }\n\n  getDeck() {\n    return this.deck;\n  }\n\n  getTokens() {\n    return this.tokens;\n  }\n\n  setDeck(deck) {\n    this.deck = deck;\n  }\n\n  setTokens(tokens) {\n    this.tokens = tokens;\n  }\n}\n\nexport {Player};\n","import React, { Component } from 'react';\nimport './Hand.css';\n\n\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n    this.TableCanvas = React.createRef();\n    this.render.bind(this);\n    this.deck = this.props.playerService.getPlayers()[this.props.id].getDeck();\n    this.tokens = this.props.playerService.getPlayers()[this.props.id].getTokens();\n  }\n\n  render = () => {\n    return (\n      <div className=\"PlayerHand\">\n        <div role=\"header\" className=\"PlayerHeader\" name=\"Player1\">\n          Player {this.props.id+1}\n        </div>\n        <div className=\"PlayerTokenHeader\">\n          Tokens\n        </div>\n        {this.deck.map((card, index) => (\n          <div className='PlayerCard' role='playerCard' key={index} onClick={() => this.props.cardPressedCallback(this.props.id, index)}>\n            {card.seen ? card.value : '?'}\n          </div>\n        ))}\n        <div className='PlayerTokens'>\n        {this.tokens.map((token, index) => (\n          <div className='PlayerToken' role='playerToken' key={index}>\n            {token}\n          </div>\n        ))}\n        </div>\n      </div>\n  )}\n}\n\nexport default Hand;\n","import React, { Component } from 'react';\nimport './MiddleSection.css';\n\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n    this.TableCanvas = React.createRef();\n    this.render.bind(this);\n    this.gameService = props.gameService;\n  }\n\n  getTopDiscardValue() {\n    return this.gameService.getDiscard().length > 0 ? this.gameService.getDiscard()[this.gameService.getDiscard().length-1].value : '';\n  }\n\n  render = () => {\n    return (\n      <div className=\"MiddleSection\">\n        <div>\n        </div>\n        <div className=\"DiscardSection\">\n          <div className=\"FullWidth\" role=\"header\">\n            Discard\n          </div>\n          <div className=\"PlayerCard\" role=\"playerCard\" onClick={() => {this.props.drawCallback('discard')}}>\n            {this.getTopDiscardValue()}\n          </div>\n        </div>\n        <div  className=\"DeckSection\">\n          <div className=\"FullWidth\" role=\"header\">\n            Deck\n          </div>\n          <div className=\"PlayerCard Card\" role=\"playerCard\" onClick={() => {this.props.drawCallback('deck')}}>\n            ?\n          </div>\n        </div>\n      </div>\n  )}\n}\n\nexport default Hand;\n","import React, { Component } from 'react';\nimport './FooterSection.css';\nconst { getPlayerTextForMoveState} = require('../Utils.js')\n\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n    this.gameService = props.gameService;\n    this.TableCanvas = React.createRef();\n    this.render.bind(this);\n  }\n  //TODO Hide turn-faceup if all cards are faceup\n\n  ShowCardActions = () => {\n    return [\"CardDrawn\", \"DiscardChosen\", \"CardDiscarded\", \"SwapChosen\", \"SwapInProgress\"].includes(this.props.moveState)\n  }\n\n  ShowEndActions = () => {\n    return this.props.moveState === \"PreEndState\";\n  }\n\n  ShowToken = token => {\n    return this.gameService.canClaimToken(token);\n  }\n\n  render = () => {\n    return (\n      <div className=\"CardTableFooter\">\n        <div className=\"FullWidth\" role='header'>\n          {getPlayerTextForMoveState(this.props.moveState, this.gameService.getSwapCardIndex() + 1)}\n        </div>\n        {this.ShowCardActions() &&\n          <React.Fragment>\n            <div className=\"FullWidth\"><button className=\"mb-2 FullWidth\" onClick={this.props.passTurnButtonPressed}> Pass </button></div>\n              {(!!this.gameService.getActiveCard() && !!this.gameService.getActiveCard().value) &&\n              <React.Fragment>\n                <div className=\"PlayerCard\" role=\"activeCard\">\n                  {this.gameService.getActiveCard().value}\n                </div>\n                <div>\n                  <button onClick={this.props.turnCardsFaceUpButtonPressed}> Discard to turn two face up </button>\n                  <button onClick={this.props.swapCardsButtonPressed}> Discard to swap two </button>\n                </div>\n            </React.Fragment>}\n          </React.Fragment>}\n\n          {this.ShowEndActions() &&\n            <React.Fragment>\n                <div className=\"FullWidth\"><button className=\"mb-2 FullWidth\" onClick={this.props.changeTurn}> Pass </button></div>\n                {this.ShowToken('THREE_IN_A_ROW') && <div><button onClick={() => this.props.claimToken('THREE_IN_A_ROW')}> THREE IN A ROW </button></div>}\n                {this.ShowToken('FOUR_IN_A_ROW') && <div><button onClick={() => this.props.claimToken('FOUR_IN_A_ROW')}> FOUR IN A ROW </button></div>}\n                {this.ShowToken('FIVE_IN_A_ROW') && <div><button onClick={() => this.props.claimToken('FIVE_IN_A_ROW')}> FIVE IN A ROW </button></div>}\n                {this.ShowToken('THREE_OF_A_KIND') && <div><button onClick={() => this.props.claimToken('THREE_OF_A_KIND')}> THREE OF A KIND </button></div>}\n                {this.ShowToken('FULL_HOUSE') && <div><button onClick={() => this.props.claimToken('FULL_HOUSE')}> FULL HOUSE </button></div>}\n            </React.Fragment>}\n      </div>\n  )}\n}\n\nexport default Hand;\n","import React, { Component } from 'react';\nimport Hand from './Hand.js';\nimport MiddleSection from './MiddleSection.js';\nimport FooterSection from './FooterSection.js';\nimport './Straight5.css';\nconst { GameService } = require('../service/GameService.js')\nconst { PlayerService } = require('../service/PlayerService.js')\n\n// TODO Start game\n//  TODO WIN\nclass Straight5 extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      AppMode: \"StartState\", // NOT USED CURRENTLY - NoGame, Game, PlayerWin\n      MoveState: \"StartState\", // StartState, CardDrawn, DiscardChosen, CardDiscarded, SwapChosen, SwapInProgress, PreEndState, ClaimingToken\n    };\n    this.TableCanvas = React.createRef();\n  }\n\n  componentDidMount() {\n    // this.StartNewGame();\n  }\n\n  StartNewGame = () => {\n    this.playerService = new PlayerService(2);\n    this.gameService = new GameService(this.playerService);\n    this.gameService.startNewGame();\n    this.setState({\n      MoveState: \"StartState\",\n      AppMode: \"Game\"\n    });\n  }\n\n  DrawCard = type => {\n    if (this.state.MoveState !== 'StartState') {\n      //TODO animation?\n      return;\n    }\n    if (type === 'deck') {\n      this.gameService.drawCardFromDeck();\n    } else if (type === 'discard') {\n      this.gameService.drawCardFromDiscard();\n    } else {\n      console.error('draw card failed', type);\n    }\n    this.setState({\n      MoveState: \"CardDrawn\"\n    });\n\n  }\n\n  ReplaceCard = index => {\n    this.gameService.replaceCard(index);\n    this.EndMove();\n  }\n\n  DiscardCard = () => {\n    this.gameService.discardActiveCard();\n  }\n\n  SwapCardsButtonPressed = () => {\n    if (this.state.MoveState !== 'CardDrawn') {\n      return\n    }\n    this.setState({MoveState: 'SwapChosen'})\n    this.DiscardCard()\n  }\n\n  TurnCardsFaceUpButtonPressed = () => {\n    if (this.state.MoveState !== 'CardDrawn') {\n      return\n    }\n    this.setState({MoveState: 'DiscardChosen'})\n    this.DiscardCard()\n  }\n\n  PassTurnButtonPressed = () => {\n    if (this.state.MoveState === \"CardDrawn\") {\n      this.DiscardCard()\n    }\n    this.EndMove();\n  }\n\n  TurnCardFaceUp = index => {\n    if (!this.gameService.turnCardFaceUp(index)) {\n      return;\n    }\n    // TODO if all face-up should skip this step\n    if (this.state.MoveState === 'CardDiscarded') {\n      this.EndMove();\n      return;\n    }\n    this.setState({\n      MoveState: 'CardDiscarded',\n    });\n  }\n\n  SwapCards = index => {\n    if (this.gameService.swapIsValid(index)) {\n      this.gameService.swapCards(index);\n      this.EndMove();\n      return\n    }\n    this.gameService.setSwapCardIndex(index);\n    this.setState({\n      MoveState: 'SwapInProgress'\n    })\n  }\n\n  EndMove = () => {\n    if (this.gameService.activePlayerCanClaimToken()) {\n      this.setState({MoveState: 'PreEndState'});\n      return;\n    }\n    this.ChangeTurn();\n\n  }\n\n  ClaimToken = token => {\n    this.gameService.setTokenToClaim(token);\n    if(['THREE_OF_A_KIND', 'FULL_HOUSE', 'FIVE_IN_A_ROW'].includes(token)) {\n      // this could be smarter if only one option for three / four in a row\n      this.gameService.claimToken();\n      if (this.gameService.getActivePlayersTokens().length >= 4) {\n      // if (this.gameService.getActivePlayersTokens().length >= 4) {\n        this.setState({\n          AppMode: 'PlayerWin'\n        });\n        return;\n      }\n      return this.ChangeTurn();\n    }\n    // TODO COME BACK TO THIS LATER, would like more auto-claim for 3/4 in a row\n    // TODO Less autoclaim if multiple options for three of a\n    this.setState({\n        MoveState: \"ClaimingToken\"\n      });\n  }\n\n  ClaimTokenCardPress = index => {\n    if (this.gameService.isValidIndexForToken(index)) {\n      this.gameService.claimToken(index);\n      if (this.gameService.getActivePlayersTokens().length >= 4) {\n      // if (this.gameService.getActivePlayersTokens().length >= 4) {\n        this.setState({\n          AppMode: 'PlayerWin'\n        });\n      } else {\n        this.ChangeTurn();\n      }\n    } else {\n      console.error('invalid index :(')\n    }\n  }\n\n  ChangeTurn = () => {\n    this.gameService.nextPlayer();\n    this.setState({\n      MoveState: \"StartState\"\n    })\n  }\n\n  handlePlayerAction = (player, index)  =>  {\n    if (player !== this.gameService.getActivePlayerIndex()) {\n      console.error('WRONG PLAYER')\n      return;\n    }\n    switch (this.state.MoveState) {\n      case \"CardDrawn\":\n        this.ReplaceCard(index)\n        break;\n      case \"DiscardChosen\":\n      case \"CardDiscarded\":\n        this.TurnCardFaceUp(index);\n        break\n      case \"SwapChosen\":\n      case \"SwapInProgress\":\n        this.SwapCards(index)\n        break\n      case \"ClaimingToken\":\n        this.ClaimTokenCardPress(index);\n        break;\n      default:\n        console.error('NO ACTION FOR THIS')\n    }\n  }\n  // TODO SHOW ACTIVE PLAYER\n  // TODO ADD joker\n  // TODO ADD AI\n\n\n  render = () => {\n    return (\n  <div className=\"CardTable\">\n    {this.state.AppMode  === 'Game' &&\n    <React.Fragment>\n      <div>\n        Straight 5\n      </div>\n      <Hand playerService={this.playerService} id={0} cardPressedCallback={this.handlePlayerAction} />\n      <MiddleSection gameService={this.gameService} drawCallback={this.DrawCard}/>\n      <Hand playerService={this.playerService} id={1} cardPressedCallback={this.handlePlayerAction} />\n      <FooterSection gameService={this.gameService} moveState={this.state.MoveState} passTurnButtonPressed={this.PassTurnButtonPressed} turnCardsFaceUpButtonPressed={this.TurnCardsFaceUpButtonPressed} swapCardsButtonPressed={this.SwapCardsButtonPressed} changeTurn={this.ChangeTurn} claimToken={this.ClaimToken} />\n    </React.Fragment>}\n    {this.state.AppMode === 'StartState' &&\n    <React.Fragment>\n        <div className=\"mb-4\">\n        Welcome to Straight 5!\n        <button className=\"mt-2\" onClick={this.StartNewGame}>Start New Game</button>\n        </div>\n    </React.Fragment>}\n\n    {this.state.AppMode === 'PlayerWin' &&\n    <React.Fragment>\n        <div className=\"mb-4\">\n        Congratulations to Player {this.gameService.getActivePlayerIndex()+1}\n        <button className=\"mt-2\" onClick={this.StartNewGame}>Start a new Game</button>\n        </div>\n    </React.Fragment>}\n  </div>\n  )}\n}\n\nexport default Straight5;\n","import './App.css';\nimport Straight5 from './components/Straight5.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n      <div className=\"Container\">\n\n        <Straight5></Straight5>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}